var search_data = {"index":{"searchIndex":["thinkingdata","casesensitivepost","headlesslogger","logdevice","tdanalytics","tdbatchconsumer","tddebugconsumer","tderrorhandler","tdlog","tdloggerconsumer","[]()","[]=()","_set_compress()","add()","add()","add()","add_log_header()","capitalize()","clear_dynamic_super_properties()","clear_super_properties()","close()","close()","close()","flush()","flush()","get_enable_log()","get_stringent()","handle()","info()","initialize_http_header()","new()","new()","new()","new()","new()","request()","set_compress()","set_dynamic_super_properties()","set_enable_log()","set_stringent()","set_super_properties()","track()","track_overwrite()","track_update()","user_add()","user_append()","user_del()","user_set()","user_set_once()","user_uniq_append()","user_unset()","readme"],"longSearchIndex":["thinkingdata","thinkingdata::casesensitivepost","thinkingdata::headlesslogger","thinkingdata::headlesslogger::logdevice","thinkingdata::tdanalytics","thinkingdata::tdbatchconsumer","thinkingdata::tddebugconsumer","thinkingdata::tderrorhandler","thinkingdata::tdlog","thinkingdata::tdloggerconsumer","thinkingdata::casesensitivepost#[]()","thinkingdata::casesensitivepost#[]=()","thinkingdata::tdbatchconsumer#_set_compress()","thinkingdata::tdbatchconsumer#add()","thinkingdata::tddebugconsumer#add()","thinkingdata::tdloggerconsumer#add()","thinkingdata::headlesslogger::logdevice#add_log_header()","thinkingdata::casesensitivepost#capitalize()","thinkingdata::tdanalytics#clear_dynamic_super_properties()","thinkingdata::tdanalytics#clear_super_properties()","thinkingdata::tdanalytics#close()","thinkingdata::tdbatchconsumer#close()","thinkingdata::tdloggerconsumer#close()","thinkingdata::tdanalytics#flush()","thinkingdata::tdbatchconsumer#flush()","thinkingdata::get_enable_log()","thinkingdata::get_stringent()","thinkingdata::tderrorhandler#handle()","thinkingdata::tdlog::info()","thinkingdata::casesensitivepost#initialize_http_header()","thinkingdata::headlesslogger::new()","thinkingdata::tdanalytics::new()","thinkingdata::tdbatchconsumer::new()","thinkingdata::tddebugconsumer::new()","thinkingdata::tdloggerconsumer::new()","thinkingdata::tddebugconsumer#request()","thinkingdata::tdbatchconsumer#set_compress()","thinkingdata::tdanalytics#set_dynamic_super_properties()","thinkingdata::set_enable_log()","thinkingdata::set_stringent()","thinkingdata::tdanalytics#set_super_properties()","thinkingdata::tdanalytics#track()","thinkingdata::tdanalytics#track_overwrite()","thinkingdata::tdanalytics#track_update()","thinkingdata::tdanalytics#user_add()","thinkingdata::tdanalytics#user_append()","thinkingdata::tdanalytics#user_del()","thinkingdata::tdanalytics#user_set()","thinkingdata::tdanalytics#user_set_once()","thinkingdata::tdanalytics#user_uniq_append()","thinkingdata::tdanalytics#user_unset()",""],"info":[["ThinkingData","","ThinkingData.html","","<p>ThinkingData module\n"],["ThinkingData::CaseSensitivePost","","ThinkingData/CaseSensitivePost.html","","<p>Private class. Send data tools\n"],["ThinkingData::HeadlessLogger","","ThinkingData/HeadlessLogger.html","","<p>Dismantle the header and save it under another name\n"],["ThinkingData::HeadlessLogger::LogDevice","","ThinkingData/HeadlessLogger/LogDevice.html","",""],["ThinkingData::TDAnalytics","","ThinkingData/TDAnalytics.html","","<p>Analytics class。 Provides the function of tracking data\n"],["ThinkingData::TDBatchConsumer","","ThinkingData/TDBatchConsumer.html","","<p>Upload data by http\n"],["ThinkingData::TDDebugConsumer","","ThinkingData/TDDebugConsumer.html","","<p>The data is reported one by one, and when an error occurs, the log will be printed on the console.\n"],["ThinkingData::TDErrorHandler","","ThinkingData/TDErrorHandler.html","","<p>Error handler\n<p>e.g.\n\n<pre>class MyErrorHandler &lt; ThinkingData::ErrorHandler\n  def handle(error)\n      puts error ...</pre>\n"],["ThinkingData::TDLog","","ThinkingData/TDLog.html","","<p>SDK log module\n"],["ThinkingData::TDLoggerConsumer","","ThinkingData/TDLoggerConsumer.html","","<p>Write data to file, it works with LogBus\n"],["[]","ThinkingData::CaseSensitivePost","ThinkingData/CaseSensitivePost.html#method-i-5B-5D","(name)",""],["[]=","ThinkingData::CaseSensitivePost","ThinkingData/CaseSensitivePost.html#method-i-5B-5D-3D","(name, val)",""],["_set_compress","ThinkingData::TDBatchConsumer","ThinkingData/TDBatchConsumer.html#method-i-_set_compress","(compress)","<p>http request compress @param compress [Boolean] compress or not @deprecated please use: set_compress …\n"],["add","ThinkingData::TDBatchConsumer","ThinkingData/TDBatchConsumer.html#method-i-add","(message)",""],["add","ThinkingData::TDDebugConsumer","ThinkingData/TDDebugConsumer.html#method-i-add","(message)",""],["add","ThinkingData::TDLoggerConsumer","ThinkingData/TDLoggerConsumer.html#method-i-add","(msg)",""],["add_log_header","ThinkingData::HeadlessLogger::LogDevice","ThinkingData/HeadlessLogger/LogDevice.html#method-i-add_log_header","(file)",""],["capitalize","ThinkingData::CaseSensitivePost","ThinkingData/CaseSensitivePost.html#method-i-capitalize","(name)",""],["clear_dynamic_super_properties","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-clear_dynamic_super_properties","()","<p>Clear dynamic super properties\n"],["clear_super_properties","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-clear_super_properties","()","<p>Clear super properties\n"],["close","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-close","()","<p>Close and exit sdk\n"],["close","ThinkingData::TDBatchConsumer","ThinkingData/TDBatchConsumer.html#method-i-close","()",""],["close","ThinkingData::TDLoggerConsumer","ThinkingData/TDLoggerConsumer.html#method-i-close","()",""],["flush","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-flush","()","<p>Report data immediately\n"],["flush","ThinkingData::TDBatchConsumer","ThinkingData/TDBatchConsumer.html#method-i-flush","()",""],["get_enable_log","ThinkingData","ThinkingData.html#method-c-get_enable_log","()","<p>Get log status @return [Boolean] enable or not\n"],["get_stringent","ThinkingData","ThinkingData.html#method-c-get_stringent","()","<p>Get parameter check status of SDK @return [Boolean] check or not\n"],["handle","ThinkingData::TDErrorHandler","ThinkingData/TDErrorHandler.html#method-i-handle","(error)","<p>Override #handle to customize error handling\n"],["info","ThinkingData::TDLog","ThinkingData/TDLog.html#method-c-info","(*msg)",""],["initialize_http_header","ThinkingData::CaseSensitivePost","ThinkingData/CaseSensitivePost.html#method-i-initialize_http_header","(headers)",""],["new","ThinkingData::HeadlessLogger","ThinkingData/HeadlessLogger.html#method-c-new","(logdev, shift_age = 0, shift_size = 1048576)",""],["new","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-c-new","(consumer, error_handler = nil, uuid: false)","<p>Init function\n\n<pre>@param consumer [consumer] data consumer: TDLoggerConsumer | TDDebugConsumer | TDBatchConsumer ...</pre>\n"],["new","ThinkingData::TDBatchConsumer","ThinkingData/TDBatchConsumer.html#method-c-new","(server_url, app_id, max_buffer_length = DEFAULT_LENGTH)","<p>Init batch consumer\n"],["new","ThinkingData::TDDebugConsumer","ThinkingData/TDDebugConsumer.html#method-c-new","(server_url, app_id, write_data = true, device_id: nil)","<p>Init debug consumer\n\n<pre>@param server_url: server url\n@param app_id: app id\n@param write_data: is write data ...</pre>\n"],["new","ThinkingData::TDLoggerConsumer","ThinkingData/TDLoggerConsumer.html#method-c-new","(log_path='.', mode='daily', prefix:'te.log')","<p>Init logger consumer\n\n<pre>@param log_path: log file&#39;s path\n@param mode: file rotate mode\n@param prefix: file ...</pre>\n"],["request","ThinkingData::TDDebugConsumer","ThinkingData/TDDebugConsumer.html#method-i-request","(uri, form_data,headers)",""],["set_compress","ThinkingData::TDBatchConsumer","ThinkingData/TDBatchConsumer.html#method-i-set_compress","(compress)","<p>http request compress @param compress [Boolean] compress or not\n"],["set_dynamic_super_properties","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-set_dynamic_super_properties","(&block)","<p>Set dynamic super properties\n"],["set_enable_log","ThinkingData","ThinkingData.html#method-c-set_enable_log","(enable)","<p>Enable SDK log or not @param enable [Boolean] true or false\n"],["set_stringent","ThinkingData","ThinkingData.html#method-c-set_stringent","(enable)","<p>Check or not parameter @param enable [Boolean] check or not\n"],["set_super_properties","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-set_super_properties","(properties, skip_local_check = false)","<p>Set common properties\n"],["track","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-track","(event_name: nil, distinct_id: nil, account_id: nil, properties: {}, time: nil, ip: nil,first_check_id:nil, skip_local_check: false)","<p>Report ordinary event\n\n<pre>event_name: (require) A string of 50 letters and digits that starts with &#39;#&#39; or ...</pre>\n"],["track_overwrite","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-track_overwrite","(event_name: nil,event_id: nil, distinct_id: nil, account_id: nil, properties: {}, time: nil, ip: nil, skip_local_check: false)","<p>Report overridable event\n\n<pre>event_name: (require) A string of 50 letters and digits that starts with &#39;#&#39; ...</pre>\n"],["track_update","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-track_update","(event_name: nil,event_id: nil, distinct_id: nil, account_id: nil, properties: {}, time: nil, ip: nil, skip_local_check: false)","<p>Report updatable event\n\n<pre>event_name: (require) A string of 50 letters and digits that starts with &#39;#&#39; or ...</pre>\n"],["user_add","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-user_add","(distinct_id: nil, account_id: nil, properties: {})","<p>To accumulate operations against the property\n\n<pre>distinct_id: (optional) distinct ID\naccount_id: (optional) ...</pre>\n"],["user_append","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-user_append","(distinct_id: nil, account_id: nil, properties: {})","<p>To append user properties of array type\n\n<pre>distinct_id: (optional) distinct ID\naccount_id: (optional) account ...</pre>\n"],["user_del","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-user_del","(distinct_id: nil, account_id: nil)","<p>Delete a user, This operation cannot be undone\n\n<pre>distinct_id: (optional) distinct ID\naccount_id: (optional) ...</pre>\n"],["user_set","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-user_set","(distinct_id: nil, account_id: nil, properties: {}, ip: nil)","<p>Set user properties. would overwrite existing names\n\n<pre>distinct_id: (optional) distinct ID\naccount_id: (optional) ...</pre>\n"],["user_set_once","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-user_set_once","(distinct_id: nil, account_id: nil, properties: {}, ip: nil)","<p>Set user properties, If such property had been set before, this message would be neglected\n\n<pre>distinct_id: ...</pre>\n"],["user_uniq_append","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-user_uniq_append","(distinct_id: nil, account_id: nil, properties: {})","<p>To append user properties of array type. It filters out duplicate values\n\n<pre>distinct_id: (optional) distinct ...</pre>\n"],["user_unset","ThinkingData::TDAnalytics","ThinkingData/TDAnalytics.html#method-i-user_unset","(distinct_id: nil, account_id: nil, property: nil)","<p>Clear the user properties of users\n\n<pre>distinct_id: (optional) distinct ID\naccount_id: (optional) account ...</pre>\n"],["README","","README_md.html","","<p>ThinkingData SDK for Ruby\n<p>This is the ThinkingData™ SDK for Ruby. Documentation is available on our help …\n"]]}}